# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11oboHCTifK6yPmgr1_yRYzm_LFnWxhWj
"""

from collections import Counter

def aminoMassTable():
    aminoMass = {
        'G': 57,
        'A': 71,
        'S': 87,
        'P': 97,
        'V': 99,
        'T': 101,
        'C': 103,
        'I': 113,
        'L': 113,
        'N': 114,
        'D': 115,
        'K': 128,
        'Q': 128,
        'E': 129,
        'M': 131,
        'H': 137,
        'F': 147,
        'R': 156,
        'Y': 163,
        'W': 186
    }
    return aminoMass

def linearSpectrum(peptide):
    aminoMassT = aminoMassTable()
    prefixMass = {
        0: 0
    }
    for i in range(len(peptide)):
        for j in range(20):
            if(list(aminoMassT.keys())[j] == peptide[i]):
                prefixMass[i + 1] = prefixMass[i] + aminoMassT[peptide[i]]

    linearSpc = [0]
    for i in range(len(peptide)):
        for j in range(i + 1, len(peptide) + 1):
            linearSpc.append(prefixMass[j] - prefixMass[i])
    return sorted(linearSpc)

def linearScore(expMass, peptide):
    expMass = expMass.split(" ")
    ls = linearSpectrum(peptide)
    ls = list(map(str, ls))
    counter1 = Counter(expMass)
    counter2 = Counter(ls)

    common_elements = counter1 & counter2
    count = sum(common_elements.values())
    return count

peptides = "MGFSFDNLNTPHWWKVPSRRKELILKEGIMRAAWLIQKIPLCEEHMTWY YQTQDKGWCSWYIVSPNFGELKVREKIADWQIGGKLDIPHECAVNMCRM KWLPMCAWDGWHQMYTWHFTYSNCCLNFTRNCWPNECRAWHYYRQESSH ILQRANMQPCRSSRMHPRKFVLHPDGTAFLHFTHWTVIVLNENYEEAWW KWQTKYWRCEYQHCPCHYWREPVALWVNRKSFYEYGQCAMNTGSKEHPL EEMGGDNATWIGFEEPLMTNWGVNWPYTWVVVINLSICPIGQGMKLVMR VWHMHTDNCSFSLEQPITVMMGIQAMDQGYTFPGWWQMLGLVCENQTAI VDATHAKLWNVSHKRTPQVLSHCPIYLSCLQNLAQPTVHVPKECMPPDY PQRNWQQVIGPWMKRFRIGFLKNGAGNYKALIHGYMGNCIVTCIYDSDQ AFLWIDGRPSRMTIYVLSSKVWGTCDNKSTSHGCQMMGYYYQIQAWWAY PCSECSLIAPGTNMVRPEMWKMVGHIERDLLTLMLVELPMFMACTHTDF KPMWIQDSGVLLCKSPCWEYGTIHFFMLRWKQHWEGSKLAHWCWGLPAT YHIAPHHYEFVGLMHIAQCPELDDTSNTEMKMGVAKRPVGRLLCCECET MSRDHQHISMFYTMSDERISWQKAGTVWGPYWVEEEGVTLWATMAKRIV TLRDFNSARDFHFRRRGSEFYPGWVNNHHLISNALNAMNAHADQVCIWL TTKNDHKCYFCSPWWEVQHCIRANGKMAGCRPHKGLKLAFVHGKQACHK TPFWSYSHPYMALEERHYHNHENASYVYQRNFWKMYQSCKYVNDYRLQR VIHQLPMNIDSAFRDFMTSSHLKYDTYLAMRGLTVKPAVEYGHGARKRG"
expMass = "0 57 57 57 57 57 71 71 71 87 97 101 101 101 101 101 101 103 103 103 103 103 113 113 113 113 113 114 114 114 114 128 128 128 128 128 128 129 129 129 131 131 144 147 147 156 158 163 163 163 163 170 170 171 171 174 184 185 186 186 188 199 199 200 202 204 204 204 206 213 214 214 215 226 227 227 228 229 232 241 242 245 245 248 256 257 257 257 257 258 260 266 266 271 277 277 283 284 284 286 286 289 291 292 294 298 299 299 300 302 305 310 310 313 315 315 315 316 317 327 328 335 340 342 343 346 346 348 355 356 356 359 361 363 363 367 369 370 370 380 384 385 386 389 392 397 397 399 400 405 405 411 412 413 413 416 418 420 428 429 430 431 436 440 443 443 447 447 449 449 454 456 457 457 457 457 462 468 470 471 476 477 480 483 484 485 489 491 492 498 500 508 511 514 514 514 517 519 523 524 526 526 526 531 533 534 542 544 544 546 548 550 550 558 560 563 568 570 571 571 572 579 580 582 583 585 588 593 594 596 597 597 599 599 601 605 615 618 620 620 627 627 627 632 636 637 640 640 642 645 647 651 651 652 654 655 661 671 673 675 676 684 689 691 691 694 694 694 697 697 697 699 699 700 702 710 710 714 728 728 728 730 733 738 740 746 746 748 748 751 752 753 755 756 756 760 764 768 768 769 774 781 783 792 794 794 795 795 799 803 805 808 810 810 812 813 813 815 824 828 831 839 839 841 841 841 849 854 856 860 863 865 865 867 869 870 873 875 877 877 879 881 883 889 896 896 896 897 897 897 900 906 909 909 909 911 914 916 918 927 928 934 938 940 942 942 952 954 957 957 960 966 968 968 968 969 976 978 978 980 983 985 987 991 993 1001 1009 1009 1010 1010 1014 1017 1019 1025 1025 1035 1037 1038 1039 1039 1040 1040 1043 1052 1054 1055 1056 1056 1060 1060 1061 1065 1066 1067 1071 1073 1081 1082 1088 1090 1094 1094 1096 1096 1096 1096 1098 1104 1111 1113 1115 1122 1122 1123 1123 1123 1127 1141 1150 1151 1153 1153 1156 1157 1164 1167 1167 1167 1173 1174 1179 1180 1180 1181 1182 1183 1185 1187 1187 1191 1195 1195 1198 1199 1205 1210 1211 1218 1223 1224 1224 1224 1226 1228 1236 1236 1242 1244 1252 1252 1264 1267 1267 1269 1270 1270 1276 1281 1284 1286 1288 1288 1293 1293 1295 1296 1299 1302 1308 1309 1312 1319 1324 1326 1327 1327 1331 1336 1337 1338 1339 1343 1345 1350 1350 1352 1353 1354 1354 1355 1365 1365 1371 1373 1373 1380 1380 1389 1389 1391 1395 1398 1401 1402 1409 1409 1411 1413 1421 1428 1430 1432 1432 1440 1440 1444 1446 1450 1450 1451 1455 1465 1466 1466 1466 1466 1468 1468 1474 1478 1479 1482 1483 1486 1489 1492 1492 1493 1497 1502 1503 1512 1522 1523 1527 1529 1531 1536 1536 1541 1541 1543 1547 1551 1554 1558 1563 1564 1564 1569 1572 1579 1579 1579 1579 1580 1583 1586 1593 1593 1596 1603 1605 1607 1610 1615 1625 1629 1630 1634 1636 1636 1637 1644 1644 1649 1652 1654 1655 1657 1658 1659 1660 1665 1665 1667 1667 1670 1675 1677 1678 1680 1686 1692 1706 1706 1711 1716 1724 1724 1726 1732 1733 1737 1743 1748 1749 1749 1750 1755 1757 1759 1765 1766 1770 1772 1778 1778 1781 1783 1784 1786 1787 1788 1790 1793 1793 1800 1807 1807 1814 1820 1825 1829 1834 1835 1846 1847 1849 1850 1851 1856 1858 1862 1864 1878 1879 1879 1880 1884 1887 1887 1889 1896 1903 1904 1906 1908 1915 1915 1918 1921 1928 1933 1935 1935 1935 1936 1943 1946 1950 1951 1959 1961 1963 1963 1964 1967 1970 1977 1978 1988 1990 1990 1992 1992 1992 2000 2005 2016 2021 2029 2032 2034 2036 2036 2046 2047 2049 2050 2059 2062 2063 2064 2064 2064 2070 2073 2080 2082 2087 2091 2091 2091 2092 2093 2101 2105 2106 2106 2107 2119 2121 2133 2135 2137 2137 2149 2149 2160 2160 2162 2163 2163 2176 2178 2178 2183 2188 2192 2192 2194 2194 2196 2202 2204 2206 2219 2220 2221 2233 2233 2234 2235 2235 2238 2240 2245 2249 2250 2250 2261 2263 2274 2276 2277 2278 2291 2292 2295 2305 2305 2307 2307 2307 2309 2320 2323 2332 2341 2346 2347 2349 2351 2359 2362 2363 2364 2364 2366 2375 2378 2379 2380 2389 2389 2392 2392 2403 2406 2406 2406 2408 2420 2420 2423 2426 2434 2435 2437 2446 2454 2460 2469 2472 2475 2476 2477 2478 2480 2491 2493 2493 2504 2506 2507 2507 2509 2517 2523 2526 2534 2534 2535 2536 2537 2538 2540 2543 2548 2550 2555 2564 2578 2583 2588 2589 2593 2594 2596 2606 2607 2608 2619 2632 2635 2635 2637 2639 2640 2641 2645 2653 2663 2664 2664 2677 2679 2681 2684 2686 2689 2690 2692 2697 2699 2702 2711 2720 2720 2721 2734 2738 2742 2752 2756 2759 2763 2764 2767 2782 2782 2784 2791 2792 2800 2803 2805 2812 2815 2820 2821 2824 2827 2833 2839 2846 2848 2849 2855 2860 2863 2865 2883 2885 2885 2901 2903 2904 2906 2922 2929 2934 2934 2943 2947 2947 2950 2952 2952 2955 2961 2968 2974 2977 2986 2988 2991 2991 3002 3004 3007 3014 3025 3030 3032 3048 3053 3057 3060 3065 3069 3069 3075 3078 3089 3090 3102 3105 3110 3115 3117 3117 3120 3120 3122 3128 3131 3151 3158 3161 3172 3179 3188 3188 3203 3216 3218 3220 3223 3228 3229 3231 3232 3234 3244 3245 3252 3259 3269 3282 3285 3289 3306 3316 3316 3317 3317 3330 3332 3334 3335 3347 3357 3372 3374 3379 3383 3383 3409 3414 3418 3420 3430 3432 3432 3433 3435 3443 3444 3445 3445 3480 3482 3485 3497 3502 3514 3523 3533 3536 3542 3546 3556 3558 3561 3573 3573 3574 3579 3583 3593 3595 3598 3604 3613 3628 3631 3636 3649 3659 3680 3687 3689 3696 3699 3701 3702 3707 3716 3721 3724 3729 3742 3760 3760 3762 3793 3812 3815 3817 3819 3824 3830 3830 3843 3850 3852 3863 3863 3871 3888 3920 3921 3923 3925 3943 3944 3953 3956 3966 3972 3978 3982 3991 3999 4016 4026 4050 4056 4070 4081 4084 4085 4100 4107 4113 4119 4129 4129 4130 4171 4173 4178 4210 4213 4213 4213 4233 4260 4274 4276 4284 4292 4293 4307 4341 4341 4342 4377 4387 4396 4396 4412 4423 4439 4470 4470 4470 4490 4493 4499 4515 4540 4541 4570 4596 4598 4599 4618 4644 4653 4656 4669 4671 4727 4747 4759 4772 4781 4784 4785 4798 4875 4888 4901 4910 4912 4913 4984 5004 5016 5038 5041 5087 5087 5167 5169 5190 5190 5293 5298 5353 5456 5484 5587"
N = 6
peptideLst = peptides.split(" ")
leaderboard = {}
for p in peptideLst:
    leaderboard[p] = linearScore(expMass, p)

sortedLeaderboard = dict(sorted(leaderboard.items(), key=lambda x: x[1], reverse = True))
values = list(set(sortedLeaderboard.values()))
limit = values[N - 1]
LeaderBoard = []
for q in sortedLeaderboard.items():
    if(q[1] >= limit):
        LeaderBoard.append(q[0])

for i in LeaderBoard:
    print(i, end=" ")